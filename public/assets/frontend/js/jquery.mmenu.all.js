(function (a, b) { if (typeof define === "function" && define.amd) { define(["jquery"], b) } else { if (typeof exports === "object") { module.exports = b(require("jquery")) } else { a.jquery_mmenu_all_js = b(a.jQuery) } } }(this, function (a) { !function (h) { function d() { h[k].glbl || (g = { $wndw: h(window), $docu: h(document), $html: h("html"), $body: h("body") }, f = {}, b = {}, j = {}, h.each([f, b, j], function (l, i) { i.add = function (o) { o = o.split(" "); for (var p = 0, m = o.length; p < m; p++) { i[o[p]] = i.mm(o[p]) } } }), f.mm = function (i) { return "mm-" + i }, f.add("wrapper menu panels panel nopanel highest opened subopened navbar hasnavbar title btn prev next listview nolistview inset vertical selected divider spacer hidden fullsubopen noanimation"), f.umm = function (i) { return "mm-" == i.slice(0, 3) && (i = i.slice(3)), i }, b.mm = function (i) { return "mm-" + i }, b.add("parent child"), j.mm = function (i) { return i + ".mm" }, j.add("transitionend webkitTransitionEnd click scroll resize keydown mousedown mouseup touchstart touchmove touchend orientationchange"), h[k]._c = f, h[k]._d = b, h[k]._e = j, h[k].glbl = g) } var k = "mmenu", c = "6.1.7"; if (!(h[k] && h[k].version > c)) { h[k] = function (l, i, m) { return this.$menu = l, this._api = ["bind", "getInstance", "initPanels", "openPanel", "closePanel", "closeAllPanels", "setSelected"], this.opts = i, this.conf = m, this.vars = {}, this.cbck = {}, this.mtch = {}, "function" == typeof this.___deprecated && this.___deprecated(), this._initAddons(), this._initExtensions(), this._initMenu(), this._initPanels(), this._initOpened(), this._initAnchors(), this._initMatchMedia(), "function" == typeof this.___debug && this.___debug(), this }, h[k].version = c, h[k].addons = {}, h[k].uniqueId = 0, h[k].defaults = { extensions: [], initMenu: function () { }, initPanels: function () { }, navbar: { add: !0, title: "Menu", titleLink: "parent" }, onClick: { setSelected: !0 }, slidingSubmenus: !0 }, h[k].configuration = { classNames: { divider: "Divider", inset: "Inset", nolistview: "NoListview", nopanel: "NoPanel", panel: "Panel", selected: "Selected", spacer: "Spacer", vertical: "Vertical" }, clone: !1, openingInterval: 25, panelNodetype: "ul, ol, div", transitionDuration: 400 }, h[k].prototype = { getInstance: function () { return this }, initPanels: function (i) { this._initPanels(i) }, openPanel: function (n, m) { if (this.trigger("openPanel:before", n), n && n.length && (n.is("." + f.panel) || (n = n.closest("." + f.panel)), n.is("." + f.panel))) { var s = this; if ("boolean" != typeof m && (m = !0), n.hasClass(f.vertical)) { n.add(n.parents("." + f.vertical)).removeClass(f.hidden).parent("li").addClass(f.opened), this.openPanel(n.parents("." + f.panel).not("." + f.vertical).first()), this.trigger("openPanel:start", n), this.trigger("openPanel:finish", n) } else { if (n.hasClass(f.opened)) { return } var p = this.$pnls.children("." + f.panel), e = p.filter("." + f.opened); if (!h[k].support.csstransitions) { return e.addClass(f.hidden).removeClass(f.opened), n.removeClass(f.hidden).addClass(f.opened), this.trigger("openPanel:start", n), void this.trigger("openPanel:finish", n) } p.not(n).removeClass(f.subopened); for (var q = n.data(b.parent); q;) { q = q.closest("." + f.panel), q.is("." + f.vertical) || q.addClass(f.subopened), q = q.data(b.parent) } p.removeClass(f.highest).not(e).not(n).addClass(f.hidden), n.removeClass(f.hidden), this.openPanelStart = function () { e.removeClass(f.opened), n.addClass(f.opened), n.hasClass(f.subopened) ? (e.addClass(f.highest), n.removeClass(f.subopened)) : (e.addClass(f.subopened), n.addClass(f.highest)), this.trigger("openPanel:start", n) }, this.openPanelFinish = function () { e.removeClass(f.highest).addClass(f.hidden), n.removeClass(f.highest), this.trigger("openPanel:finish", n) }, m && !n.hasClass(f.noanimation) ? setTimeout(function () { s.__transitionend(n, function () { s.openPanelFinish.call(s) }, s.conf.transitionDuration), s.openPanelStart.call(s) }, s.conf.openingInterval) : (this.openPanelStart.call(this), this.openPanelFinish.call(this)) } this.trigger("openPanel:after", n) } }, closePanel: function (l) { this.trigger("closePanel:before", l); var i = l.parent(); i.hasClass(f.vertical) && (i.removeClass(f.opened), this.trigger("closePanel", l)), this.trigger("closePanel:after", l) }, closeAllPanels: function (l) { this.trigger("closeAllPanels:before"), this.$pnls.find("." + f.listview).children().removeClass(f.selected).filter("." + f.vertical).removeClass(f.opened); var i = this.$pnls.children("." + f.panel), m = l && l.length ? l : i.first(); this.$pnls.children("." + f.panel).not(m).removeClass(f.subopened).removeClass(f.opened).removeClass(f.highest).addClass(f.hidden), this.openPanel(m, !1), this.trigger("closeAllPanels:after") }, togglePanel: function (l) { var i = l.parent(); i.hasClass(f.vertical) && this[i.hasClass(f.opened) ? "closePanel" : "openPanel"](l) }, setSelected: function (i) { this.trigger("setSelected:before", i), this.$menu.find("." + f.listview).children("." + f.selected).removeClass(f.selected), i.addClass(f.selected), this.trigger("setSelected:after", i) }, bind: function (l, i) { this.cbck[l] = this.cbck[l] || [], this.cbck[l].push(i) }, trigger: function () { var p = this, m = Array.prototype.slice.call(arguments), q = m.shift(); if (this.cbck[q]) { for (var l = 0, o = this.cbck[q].length; l < o; l++) { this.cbck[q][l].apply(p, m) } } }, matchMedia: function (o, m, p) { var l = { yes: m, no: p }; this.mtch[o] = this.mtch[o] || [], this.mtch[o].push(l) }, _initAddons: function () { this.trigger("initAddons:before"); var e; for (e in h[k].addons) { h[k].addons[e].add.call(this), h[k].addons[e].add = function () { } } for (e in h[k].addons) { h[k].addons[e].setup.call(this) } this.trigger("initAddons:after") }, _initExtensions: function () { this.trigger("initExtensions:before"); var l = this; this.opts.extensions.constructor === Array && (this.opts.extensions = { all: this.opts.extensions }); for (var i in this.opts.extensions) { this.opts.extensions[i] = this.opts.extensions[i].length ? "mm-" + this.opts.extensions[i].join(" mm-") : "", this.opts.extensions[i] && !function (e) { l.matchMedia(e, function () { this.$menu.addClass(this.opts.extensions[e]) }, function () { this.$menu.removeClass(this.opts.extensions[e]) }) }(i) } this.trigger("initExtensions:after") }, _initMenu: function () { this.trigger("initMenu:before"); this.conf.clone && (this.$orig = this.$menu, this.$menu = this.$orig.clone(), this.$menu.add(this.$menu.find("[id]")).filter("[id]").each(function () { h(this).attr("id", f.mm(h(this).attr("id"))) })), this.opts.initMenu.call(this, this.$menu, this.$orig), this.$menu.attr("id", this.$menu.attr("id") || this.__getUniqueId()), this.$pnls = h('<div class="' + f.panels + '" />').append(this.$menu.children(this.conf.panelNodetype)).prependTo(this.$menu); var e = [f.menu]; this.opts.slidingSubmenus || e.push(f.vertical), this.$menu.addClass(e.join(" ")).parent().addClass(f.wrapper), this.trigger("initMenu:after") }, _initPanels: function (m) { this.trigger("initPanels:before", m), m = m || this.$pnls.children(this.conf.panelNodetype); var o = h(), l = this, e = function (i) { i.filter(this.conf.panelNodetype).each(function () { var n = l._initPanel(h(this)); if (n) { l._initNavbar(n), l._initListview(n), o = o.add(n); var p = n.children("." + f.listview).children("li").children(l.conf.panelNodeType).add(n.children("." + l.conf.classNames.panel)); p.length && e.call(l, p) } }) }; e.call(this, m), this.opts.initPanels.call(this, o), this.trigger("initPanels:after", o) }, _initPanel: function (o) { this.trigger("initPanel:before", o); if (o.hasClass(f.panel)) { return o } if (this.__refactorClass(o, this.conf.classNames.panel, "panel"), this.__refactorClass(o, this.conf.classNames.nopanel, "nopanel"), this.__refactorClass(o, this.conf.classNames.vertical, "vertical"), this.__refactorClass(o, this.conf.classNames.inset, "inset"), o.filter("." + f.inset).addClass(f.nopanel), o.hasClass(f.nopanel)) { return !1 } var m = o.hasClass(f.vertical) || !this.opts.slidingSubmenus; o.removeClass(f.vertical); var p = o.attr("id") || this.__getUniqueId(); o.removeAttr("id"), o.is("ul, ol") && (o.wrap("<div />"), o = o.parent()), o.addClass(f.panel + " " + f.hidden).attr("id", p); var l = o.parent("li"); return m ? o.add(l).addClass(f.vertical) : o.appendTo(this.$pnls), l.length && (l.data(b.child, o), o.data(b.parent, l)), this.trigger("initPanel:after", o), o }, _initNavbar: function (n) { if (this.trigger("initNavbar:before", n), !n.children("." + f.navbar).length) { var m = n.data(b.parent), s = h('<div class="' + f.navbar + '" />'), p = h[k].i18n(this.opts.navbar.title), e = ""; if (m && m.length) { if (m.hasClass(f.vertical)) { return } if (m.parent().is("." + f.listview)) { var q = m.children("a, span").not("." + f.next) } else { var q = m.closest("." + f.panel).find('a[href="#' + n.attr("id") + '"]') } q = q.first(), m = q.closest("." + f.panel); var u = m.attr("id"); switch (p = q.text(), this.opts.navbar.titleLink) { case "anchor": e = q.attr("href"); break; case "parent": e = "#" + u }s.append('<a class="' + f.btn + " " + f.prev + '" href="#' + u + '" />') } else { if (!this.opts.navbar.title) { return } } this.opts.navbar.add && n.addClass(f.hasnavbar), s.append('<a class="' + f.title + '"' + (e.length ? ' href="' + e + '"' : "") + ">" + p + "</a>").prependTo(n), this.trigger("initNavbar:after", n) } }, _initListview: function (p) { this.trigger("initListview:before", p); var u = this.__childAddBack(p, "ul, ol"); this.__refactorClass(u, this.conf.classNames.nolistview, "nolistview"), u.filter("." + this.conf.classNames.inset).addClass(f.nolistview); var m = u.not("." + f.nolistview).addClass(f.listview).children(); this.__refactorClass(m, this.conf.classNames.selected, "selected"), this.__refactorClass(m, this.conf.classNames.divider, "divider"), this.__refactorClass(m, this.conf.classNames.spacer, "spacer"); var s = p.data(b.parent); if (s && s.parent().is("." + f.listview) && !s.children("." + f.next).length) { var q = s.children("a, span").first(), e = h('<a class="' + f.next + '" href="#' + p.attr("id") + '" />').insertBefore(q); q.is("span") && e.addClass(f.fullsubopen) } this.trigger("initListview:after", p) }, _initOpened: function () { this.trigger("initOpened:before"); var l = this.$pnls.find("." + f.listview).children("." + f.selected).removeClass(f.selected).last().addClass(f.selected), i = l.length ? l.closest("." + f.panel) : this.$pnls.children("." + f.panel).first(); this.openPanel(i, !1), this.trigger("initOpened:after") }, _initAnchors: function () { var e = this; g.$body.on(j.click + "-oncanvas", "a[href]", function (q) { var w = h(this), n = !1, m = e.$menu.find(w).length; for (var p in h[k].addons) { if (h[k].addons[p].clickAnchor.call(e, w, m)) { n = !0; break } } var u = w.attr("href"); if (!n && m && u.length > 1 && "#" == u.slice(0, 1)) { try { var v = h(u, e.$menu); v.is("." + f.panel) && (n = !0, e[w.parent().hasClass(f.vertical) ? "togglePanel" : "openPanel"](v)) } catch (s) { } } if (n && q.preventDefault(), !n && m && w.is("." + f.listview + " > li > a") && !w.is('[rel="external"]') && !w.is('[target="_blank"]')) { e.__valueOrFn(e.opts.onClick.setSelected, w) && e.setSelected(h(q.target).parent()); var t = e.__valueOrFn(e.opts.onClick.preventDefault, w, "#" == u.slice(0, 1)); t && q.preventDefault(), e.__valueOrFn(e.opts.onClick.close, w, t) && e.opts.offCanvas && "function" == typeof e.close && e.close() } }) }, _initMatchMedia: function () { var i = this; this._fireMatchMedia(), g.$wndw.on(j.resize, function (e) { i._fireMatchMedia() }) }, _fireMatchMedia: function () { for (var l in this.mtch) { for (var i = window.matchMedia && window.matchMedia(l).matches ? "yes" : "no", m = 0; m < this.mtch[l].length; m++) { this.mtch[l][m][i].call(this) } } }, _getOriginalMenuId: function () { var i = this.$menu.attr("id"); return this.conf.clone && i && i.length && (i = f.umm(i)), i }, __api: function () { var e = this, i = {}; return h.each(this._api, function (m) { var l = this; i[l] = function () { var n = e[l].apply(e, arguments); return "undefined" == typeof n ? i : n } }), i }, __valueOrFn: function (l, i, m) { return "function" == typeof l ? l.call(i[0]) : "undefined" == typeof l && "undefined" != typeof m ? m : l }, __refactorClass: function (l, i, m) { return l.filter("." + i).removeClass(i).addClass(f[m]) }, __findAddBack: function (l, i) { return l.find(i).add(l.filter(i)) }, __childAddBack: function (l, i) { return l.children(i).add(l.filter(i)) }, __filterListItems: function (i) { return i.not("." + f.divider).not("." + f.hidden) }, __filterListItemAnchors: function (i) { return this.__filterListItems(i).children("a").not("." + f.next) }, __transitionend: function (p, m, q) { var l = !1, o = function (e) { "undefined" != typeof e && e.target != p[0] || (l || (p.off(j.transitionend), p.off(j.webkitTransitionEnd), m.call(p[0])), l = !0) }; p.on(j.transitionend, o), p.on(j.webkitTransitionEnd, o), setTimeout(o, 1.1 * q) }, __getUniqueId: function () { return f.mm(h[k].uniqueId++) } }, h.fn[k] = function (l, m) { d(), l = h.extend(!0, {}, h[k].defaults, l), m = h.extend(!0, {}, h[k].configuration, m); var e = h(); return this.each(function () { var i = h(this); if (!i.data(k)) { var n = new h[k](i, l, m); n.$menu.data(k, n.__api()), e = e.add(n.$menu) } }), e }, h[k].i18n = function () { var e = {}; return function (i) { switch (typeof i) { case "object": return h.extend(e, i), e; case "string": return e[i] || i; case "undefined": default: return e } } }(), h[k].support = { touch: "ontouchstart" in window || navigator.msMaxTouchPoints || !1, csstransitions: function () { return "undefined" == typeof Modernizr || "undefined" == typeof Modernizr.csstransitions || Modernizr.csstransitions }(), csstransforms: function () { return "undefined" == typeof Modernizr || "undefined" == typeof Modernizr.csstransforms || Modernizr.csstransforms }(), csstransforms3d: function () { return "undefined" == typeof Modernizr || "undefined" == typeof Modernizr.csstransforms3d || Modernizr.csstransforms3d }() }; var f, b, j, g } }(a), function (g) { var d = "mmenu", j = "offCanvas"; g[d].addons[j] = { setup: function () { if (this.opts[j]) { var k = this, i = this.opts[j], m = this.conf[j]; h = g[d].glbl, this._api = g.merge(this._api, ["open", "close", "setPage"]), "object" != typeof i && (i = {}), "top" != i.position && "bottom" != i.position || (i.zposition = "front"), i = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], i), "string" != typeof m.pageSelector && (m.pageSelector = "> " + m.pageNodetype), this.vars.opened = !1; var e = [c.offcanvas]; "left" != i.position && e.push(c.mm(i.position)), "back" != i.zposition && e.push(c.mm(i.zposition)), g[d].support.csstransforms || e.push(c["no-csstransforms"]), g[d].support.csstransforms3d || e.push(c["no-csstransforms3d"]), this.bind("initMenu:after", function () { var o = this; this.setPage(h.$page), this._initBlocker(), this["_initWindow_" + j](), this.$menu.addClass(e.join(" ")).parent("." + c.wrapper).removeClass(c.wrapper), this.$menu[m.menuInsertMethod](m.menuInsertSelector); var l = window.location.hash; if (l) { var n = this._getOriginalMenuId(); n && n == l.slice(1) && setTimeout(function () { o.open() }, 1000) } }), this.bind("initExtensions:after", function () { for (var o = [c.mm("widescreen"), c.mm("iconbar")], l = 0; l < o.length; l++) { for (var p in this.opts.extensions) { if (this.opts.extensions[p].indexOf(o[l]) > -1) { !function (q, r) { k.matchMedia(q, function () { h.$html.addClass(o[r]) }, function () { h.$html.removeClass(o[r]) }) }(p, l); break } } } }), this.bind("open:start:sr-aria", function () { this.__sr_aria(this.$menu, "hidden", !1) }), this.bind("close:finish:sr-aria", function () { this.__sr_aria(this.$menu, "hidden", !0) }), this.bind("initMenu:after:sr-aria", function () { this.__sr_aria(this.$menu, "hidden", !0) }) } }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("offcanvas slideout blocking modal background opening blocker page no-csstransforms3d"), f.add("style") }, clickAnchor: function (p, m) { var n = this; if (this.opts[j]) { var k = this._getOriginalMenuId(); if (k && p.is('[href="#' + k + '"]')) { if (m) { return !0 } var o = p.closest("." + c.menu); if (o.length) { var i = o.data("mmenu"); if (i && i.close) { return i.close(), n.__transitionend(o, function () { n.open() }, n.conf.transitionDuration), !0 } } return this.open(), !0 } if (h.$page) { return k = h.$page.first().attr("id"), k && p.is('[href="#' + k + '"]') ? (this.close(), !0) : void 0 } } } }, g[d].defaults[j] = { position: "left", zposition: "back", blockUI: !0, moveBackground: !0 }, g[d].configuration[j] = { pageNodetype: "div", pageSelector: null, noPageSelector: [], wrapPageIfNeeded: !0, menuInsertMethod: "prependTo", menuInsertSelector: "body" }, g[d].prototype.open = function () { if (this.trigger("open:before"), !this.vars.opened) { var i = this; this._openSetup(), setTimeout(function () { i._openFinish() }, this.conf.openingInterval), this.trigger("open:after") } }, g[d].prototype._openSetup = function () { var i = this, k = this.opts[j]; this.closeAllOthers(), h.$page.each(function () { g(this).data(f.style, g(this).attr("style") || "") }), h.$wndw.trigger(b.resize + "-" + j, [!0]); var e = [c.opened]; k.blockUI && e.push(c.blocking), "modal" == k.blockUI && e.push(c.modal), k.moveBackground && e.push(c.background), "left" != k.position && e.push(c.mm(this.opts[j].position)), "back" != k.zposition && e.push(c.mm(this.opts[j].zposition)), h.$html.addClass(e.join(" ")), setTimeout(function () { i.vars.opened = !0 }, this.conf.openingInterval), this.$menu.addClass(c.opened) }, g[d].prototype._openFinish = function () { var i = this; this.__transitionend(h.$page.first(), function () { i.trigger("open:finish") }, this.conf.transitionDuration), this.trigger("open:start"), h.$html.addClass(c.opening) }, g[d].prototype.close = function () { if (this.trigger("close:before"), this.vars.opened) { var e = this; this.__transitionend(h.$page.first(), function () { e.$menu.removeClass(c.opened); var i = [c.opened, c.blocking, c.modal, c.background, c.mm(e.opts[j].position), c.mm(e.opts[j].zposition)]; h.$html.removeClass(i.join(" ")), h.$page.each(function () { g(this).attr("style", g(this).data(f.style)) }), e.vars.opened = !1, e.trigger("close:finish") }, this.conf.transitionDuration), this.trigger("close:start"), h.$html.removeClass(c.opening), this.trigger("close:after") } }, g[d].prototype.closeAllOthers = function () { h.$body.find("." + c.menu + "." + c.offcanvas).not(this.$menu).each(function () { var e = g(this).data(d); e && e.close && e.close() }) }, g[d].prototype.setPage = function (i) { this.trigger("setPage:before", i); var k = this, e = this.conf[j]; i && i.length || (i = h.$body.find(e.pageSelector), e.noPageSelector.length && (i = i.not(e.noPageSelector.join(", "))), i.length > 1 && e.wrapPageIfNeeded && (i = i.wrapAll("<" + this.conf[j].pageNodetype + " />").parent())), i.each(function () { g(this).attr("id", g(this).attr("id") || k.__getUniqueId()) }), i.addClass(c.page + " " + c.slideout), h.$page = i, this.trigger("setPage:after", i) }, g[d].prototype["_initWindow_" + j] = function () { h.$wndw.off(b.keydown + "-" + j).on(b.keydown + "-" + j, function (k) { if (h.$html.hasClass(c.opened) && 9 == k.keyCode) { return k.preventDefault(), !1 } }); var i = 0; h.$wndw.off(b.resize + "-" + j).on(b.resize + "-" + j, function (e, l) { if (1 == h.$page.length && (l || h.$html.hasClass(c.opened))) { var k = h.$wndw.height(); (l || k != i) && (i = k, h.$page.css("minHeight", k)) } }) }, g[d].prototype._initBlocker = function () { var e = this; this.opts[j].blockUI && (h.$blck || (h.$blck = g('<div id="' + c.blocker + '" class="' + c.slideout + '" />')), h.$blck.appendTo(h.$body).off(b.touchstart + "-" + j + " " + b.touchmove + "-" + j).on(b.touchstart + "-" + j + " " + b.touchmove + "-" + j, function (i) { i.preventDefault(), i.stopPropagation(), h.$blck.trigger(b.mousedown + "-" + j) }).off(b.mousedown + "-" + j).on(b.mousedown + "-" + j, function (i) { i.preventDefault(), h.$html.hasClass(c.modal) || (e.closeAllOthers(), e.close()) })) }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "scrollBugFix"; g[d].addons[j] = { setup: function () { var e = this.opts[j]; this.conf[j]; h = g[d].glbl, g[d].support.touch && this.opts.offCanvas && this.opts.offCanvas.blockUI && ("boolean" == typeof e && (e = { fix: e }), "object" != typeof e && (e = {}), e = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], e), e.fix && (this.bind("open:start", function () { this.$pnls.children("." + c.opened).scrollTop(0) }), this.bind("initMenu:after", function () { this["_initWindow_" + j]() }))) }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { fix: !0 }, g[d].prototype["_initWindow_" + j] = function () { var e = this; h.$docu.off(b.touchmove + "-" + j).on(b.touchmove + "-" + j, function (k) { h.$html.hasClass(c.opened) && k.preventDefault() }); var i = !1; h.$body.off(b.touchstart + "-" + j).on(b.touchstart + "-" + j, "." + c.panels + "> ." + c.panel, function (k) { h.$html.hasClass(c.opened) && (i || (i = !0, 0 === k.currentTarget.scrollTop ? k.currentTarget.scrollTop = 1 : k.currentTarget.scrollHeight === k.currentTarget.scrollTop + k.currentTarget.offsetHeight && (k.currentTarget.scrollTop -= 1), i = !1)) }).off(b.touchmove + "-" + j).on(b.touchmove + "-" + j, "." + c.panels + "> ." + c.panel, function (k) { h.$html.hasClass(c.opened) && g(this)[0].scrollHeight > g(this).innerHeight() && k.stopPropagation() }), h.$wndw.off(b.orientationchange + "-" + j).on(b.orientationchange + "-" + j, function () { e.$pnls.children("." + c.opened).scrollTop(0).css({ "-webkit-overflow-scrolling": "auto" }).css({ "-webkit-overflow-scrolling": "touch" }) }) }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "screenReader"; g[d].addons[j] = { setup: function () { var i = this, k = this.opts[j], e = this.conf[j]; h = g[d].glbl, "boolean" == typeof k && (k = { aria: k, text: k }), "object" != typeof k && (k = {}), k = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], k), k.aria && (this.bind("initAddons:after", function () { this.bind("initMenu:after", function () { this.trigger("initMenu:after:sr-aria") }), this.bind("initNavbar:after", function () { this.trigger("initNavbar:after:sr-aria", arguments[0]) }), this.bind("openPanel:start", function () { this.trigger("openPanel:start:sr-aria", arguments[0]) }), this.bind("close:start", function () { this.trigger("close:start:sr-aria") }), this.bind("close:finish", function () { this.trigger("close:finish:sr-aria") }), this.bind("open:start", function () { this.trigger("open:start:sr-aria") }), this.bind("open:finish", function () { this.trigger("open:finish:sr-aria") }) }), this.bind("updateListview", function () { this.$pnls.find("." + c.listview).children().each(function () { i.__sr_aria(g(this), "hidden", g(this).is("." + c.hidden)) }) }), this.bind("openPanel:start", function (m) { var l = this.$menu.find("." + c.panel).not(m).not(m.parents("." + c.panel)), o = m.add(m.find("." + c.vertical + "." + c.opened).children("." + c.panel)); this.__sr_aria(l, "hidden", !0), this.__sr_aria(o, "hidden", !1) }), this.bind("closePanel", function (l) { this.__sr_aria(l, "hidden", !0) }), this.bind("initPanels:after", function (l) { var m = l.find("." + c.prev + ", ." + c.next).each(function () { i.__sr_aria(g(this), "owns", g(this).attr("href").replace("#", "")) }); this.__sr_aria(m, "haspopup", !0) }), this.bind("initNavbar:after", function (m) { var l = m.children("." + c.navbar); this.__sr_aria(l, "hidden", !m.hasClass(c.hasnavbar)) }), k.text && (this.bind("initlistview:after", function (m) { var l = m.find("." + c.listview).find("." + c.fullsubopen).parent().children("span"); this.__sr_aria(l, "hidden", !0) }), "parent" == this.opts.navbar.titleLink && this.bind("initNavbar:after", function (m) { var l = m.children("." + c.navbar), o = !!l.children("." + c.prev).length; this.__sr_aria(l.children("." + c.title), "hidden", o) }))), k.text && (this.bind("initAddons:after", function () { this.bind("setPage:after", function () { this.trigger("setPage:after:sr-text", arguments[0]) }) }), this.bind("initNavbar:after", function (q) { var m = q.children("." + c.navbar), l = m.children("." + c.title).text(), p = g[d].i18n(e.text.closeSubmenu); l && (p += " (" + l + ")"), m.children("." + c.prev).html(this.__sr_text(p)) }), this.bind("initListview:after", function (s) { var p = s.data(f.parent); if (p && p.length) { var l = p.children("." + c.next), m = l.nextAll("span, a").first().text(), q = g[d].i18n(e.text[l.parent().is("." + c.vertical) ? "toggleSubmenu" : "openSubmenu"]); m && (q += " (" + m + ")"), l.html(i.__sr_text(q)) } })) }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("sronly") }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { aria: !0, text: !0 }, g[d].configuration[j] = { text: { closeMenu: "Close menu", closeSubmenu: "Close submenu", openSubmenu: "Open submenu", toggleSubmenu: "Toggle submenu" } }, g[d].prototype.__sr_aria = function (k, i, l) { k.prop("aria-" + i, l)[l ? "attr" : "removeAttr"]("aria-" + i, l) }, g[d].prototype.__sr_text = function (i) { return '<span class="' + c.sronly + '">' + i + "</span>" }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "autoHeight"; g[d].addons[j] = { setup: function () { var i = this.opts[j]; this.conf[j]; if (h = g[d].glbl, "boolean" == typeof i && i && (i = { height: "auto" }), "string" == typeof i && (i = { height: i }), "object" != typeof i && (i = {}), i = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], i), "auto" == i.height || "highest" == i.height) { this.bind("initMenu:after", function () { this.$menu.addClass(c.autoheight) }); var e = function (l) { if (!this.opts.offCanvas || this.vars.opened) { var p = Math.max(parseInt(this.$pnls.css("top"), 10), 0) || 0, k = Math.max(parseInt(this.$pnls.css("bottom"), 10), 0) || 0, m = 0; this.$menu.addClass(c.measureheight), "auto" == i.height ? (l = l || this.$pnls.children("." + c.opened), l.is("." + c.vertical) && (l = l.parents("." + c.panel).not("." + c.vertical)), l.length || (l = this.$pnls.children("." + c.panel)), m = l.first().outerHeight()) : "highest" == i.height && this.$pnls.children().each(function () { var n = g(this); n.is("." + c.vertical) && (n = n.parents("." + c.panel).not("." + c.vertical).first()), m = Math.max(m, n.outerHeight()) }), this.$menu.height(m + p + k).removeClass(c.measureheight) } }; this.opts.offCanvas && this.bind("open:start", e), "highest" == i.height && this.bind("initPanels:after", e), "auto" == i.height && (this.bind("updateListview", e), this.bind("openPanel:start", e), this.bind("closePanel", e)) } }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("autoheight measureheight"), b.add("resize") }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { height: "default" }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "backButton"; g[d].addons[j] = { setup: function () { if (this.opts.offCanvas) { var i = this, e = this.opts[j]; this.conf[j]; if (h = g[d].glbl, "boolean" == typeof e && (e = { close: e }), "object" != typeof e && (e = {}), e = g.extend(!0, {}, g[d].defaults[j], e), e.close) { var k = "#" + i.$menu.attr("id"); this.bind("open:finish", function (l) { location.hash != k && history.pushState(null, document.title, k) }), g(window).on("popstate", function (l) { h.$html.hasClass(c.opened) ? (l.stopPropagation(), i.close()) : location.hash == k && (l.stopPropagation(), i.open()) }) } } }, add: function () { return window.history && window.history.pushState ? (c = g[d]._c, f = g[d]._d, void (b = g[d]._e)) : void (g[d].addons[j].setup = function () { }) }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { close: !1 }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "columns"; g[d].addons[j] = { setup: function () { var k = this.opts[j]; this.conf[j]; if (h = g[d].glbl, "boolean" == typeof k && (k = { add: k }), "number" == typeof k && (k = { add: !0, visible: k }), "object" != typeof k && (k = {}), "number" == typeof k.visible && (k.visible = { min: k.visible, max: k.visible }), k = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], k), k.add) { k.visible.min = Math.max(1, Math.min(6, k.visible.min)), k.visible.max = Math.max(k.visible.min, Math.min(6, k.visible.max)); for (var i = this.opts.offCanvas ? this.$menu.add(h.$html) : this.$menu, m = "", e = 0; e <= k.visible.max; e++) { m += " " + c.columns + "-" + e } m.length && (m = m.slice(1)); var n = function (p) { var l = this.$pnls.children("." + c.subopened).length; p && !p.hasClass(c.subopened) && l++ , l = Math.min(k.visible.max, Math.max(k.visible.min, l)), i.removeClass(m).addClass(c.columns + "-" + l) }, o = function (l) { l = l || this.$pnls.children("." + c.opened), this.$pnls.children("." + c.panel).removeClass(m).filter("." + c.subopened).add(l).slice(-k.visible.max).each(function (p) { g(this).addClass(c.columns + "-" + p) }) }; this.bind("initMenu:after", function () { this.$menu.addClass(c.columns) }), this.bind("openPanel:start", n), this.bind("openPanel:start", o) } }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("columns") }, clickAnchor: function (k, m) { if (!this.opts[j].add) { return !1 } if (m) { var i = k.attr("href"); if (i.length > 1 && "#" == i.slice(0, 1)) { try { var q = g(i, this.$menu); if (q.is("." + c.panel)) { for (var n = parseInt(k.closest("." + c.panel).attr("class").split(c.columns + "-")[1].split(" ")[0], 10) + 1; n > 0;) { var e = this.$pnls.children("." + c.columns + "-" + n); if (!e.length) { n = -1; break } n++ , e.removeClass(c.subopened).removeClass(c.opened).removeClass(c.highest).addClass(c.hidden) } } } catch (p) { } } } } }, g[d].defaults[j] = { add: !1, visible: { min: 1, max: 3 } }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "counters"; g[d].addons[j] = { setup: function () { var i = this, k = this.opts[j]; this.conf[j]; if (h = g[d].glbl, "boolean" == typeof k && (k = { add: k, update: k }), "object" != typeof k && (k = {}), k = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], k), this.bind("initListview:after", function (l) { this.__refactorClass(g("em", l), this.conf.classNames[j].counter, "counter") }), k.add && this.bind("initListview:after", function (l) { var m; switch (k.addTo) { case "panels": m = l; break; default: m = l.filter(k.addTo) }m.each(function () { var n = g(this).data(f.parent); n && (n.children("em." + c.counter).length || n.prepend(g('<em class="' + c.counter + '" />'))) }) }), k.update) { var e = function (l) { l = l || this.$pnls.children("." + c.panel), l.each(function () { var m = g(this), q = m.data(f.parent); if (q) { var p = q.children("em." + c.counter); p.length && (m = m.children("." + c.listview), m.length && p.html(i.__filterListItems(m.children()).length)) } }) }; this.bind("initListview:after", e), this.bind("updateListview", e) } }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("counter search noresultsmsg") }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { add: !1, addTo: "panels", count: !1 }, g[d].configuration.classNames[j] = { counter: "Counter" }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "dividers"; g[d].addons[j] = { setup: function () { var i = this, k = this.opts[j]; this.conf[j]; if (h = g[d].glbl, "boolean" == typeof k && (k = { add: k, fixed: k }), "object" != typeof k && (k = {}), k = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], k), this.bind("initListview:after", function (l) { this.__refactorClass(l.find("li"), this.conf.classNames[j].collapsed, "collapsed") }), k.add && this.bind("initListview:after", function (l) { var m; switch (k.addTo) { case "panels": m = l; break; default: m = l.filter(k.addTo) }m.length && m.find("." + c.listview).find("." + c.divider).remove().end().each(function () { var n = ""; i.__filterListItems(g(this).children()).each(function () { var o = g.trim(g(this).children("a, span").text()).slice(0, 1).toLowerCase(); o != n && o.length && (n = o, g('<li class="' + c.divider + '">' + o + "</li>").insertBefore(this)) }) }) }), k.collapse && this.bind("initListview:after", function (l) { l.find("." + c.divider).each(function () { var m = g(this), o = m.nextUntil("." + c.divider, "." + c.collapsed); o.length && (m.children("." + c.next).length || (m.wrapInner("<span />"), m.prepend('<a href="#" class="' + c.next + " " + c.fullsubopen + '" />'))) }) }), k.fixed) { this.bind("initPanels:after", function () { "undefined" == typeof this.$fixeddivider && (this.$fixeddivider = g('<ul class="' + c.listview + " " + c.fixeddivider + '"><li class="' + c.divider + '"></li></ul>').prependTo(this.$pnls).children()) }); var e = function (m) { if (m = m || this.$pnls.children("." + c.opened), !m.is(":hidden")) { var p = m.children("." + c.listview).children("." + c.divider).not("." + c.hidden), o = m.scrollTop() || 0, l = ""; p.each(function () { g(this).position().top + o < o + 1 && (l = g(this).text()) }), this.$fixeddivider.text(l), this.$pnls[l.length ? "addClass" : "removeClass"](c.hasdividers) } }; this.bind("open:start", e), this.bind("openPanel:start", e), this.bind("updateListview", e), this.bind("initPanel:after", function (l) { l.off(b.scroll + "-" + j + " " + b.touchmove + "-" + j).on(b.scroll + "-" + j + " " + b.touchmove + "-" + j, function (m) { e.call(i, l) }) }) } }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("collapsed uncollapsed fixeddivider hasdividers"), b.add("scroll") }, clickAnchor: function (m, k) { if (this.opts[j].collapse && k) { var l = m.parent(); if (l.is("." + c.divider)) { var i = l.nextUntil("." + c.divider, "." + c.collapsed); return l.toggleClass(c.opened), i[l.hasClass(c.opened) ? "addClass" : "removeClass"](c.uncollapsed), !0 } } return !1 } }, g[d].defaults[j] = { add: !1, addTo: "panels", fixed: !1, collapse: !1 }, g[d].configuration.classNames[j] = { collapsed: "Collapsed" }; var c, f, b, h }(a), function (j) { function p(i, d, l) { return i < d && (i = d), i > l && (i = l), i } function f(t, z, K) { var e, x, D, E = this, A = { events: "panleft panright", typeLower: "x", typeUpper: "X", open_dir: "right", close_dir: "left", negative: !1 }, C = "width", J = A.open_dir, o = function (d) { d <= t.maxStartPos && (w = 1) }, I = function () { return j("." + c.slideout) }, w = 0, G = 0, B = 0; switch (this.opts.offCanvas.position) { case "top": case "bottom": A.events = "panup pandown", A.typeLower = "y", A.typeUpper = "Y", C = "height" }switch (this.opts.offCanvas.position) { case "right": case "bottom": A.negative = !0, o = function (d) { d >= K.$wndw[C]() - t.maxStartPos && (w = 1) } }switch (this.opts.offCanvas.position) { case "left": break; case "right": A.open_dir = "left", A.close_dir = "right"; break; case "top": A.open_dir = "down", A.close_dir = "up"; break; case "bottom": A.open_dir = "up", A.close_dir = "down" }switch (this.opts.offCanvas.zposition) { case "front": I = function () { return this.$menu } }var H = this.__valueOrFn(t.node, this.$menu, K.$page); "string" == typeof H && (H = j(H)); var F = new Hammer(H[0], this.opts[m].vendors.hammer); F.on("panstart", function (d) { o(d.center[A.typeLower]), K.$slideOutNodes = I(), J = A.open_dir }), F.on(A.events + " panend", function (d) { w > 0 && d.preventDefault() }), F.on(A.events, function (d) { if (e = d["delta" + A.typeUpper], A.negative && (e = -e), e != G && (J = e >= G ? A.open_dir : A.close_dir), G = e, G > t.threshold && 1 == w) { if (K.$html.hasClass(c.opened)) { return } w = 2, E._openSetup(), E.trigger("open:start"), K.$html.addClass(c.dragging), B = p(K.$wndw[C]() * z[C].perc, z[C].min, z[C].max) } 2 == w && (x = p(G, 10, B) - ("front" == E.opts.offCanvas.zposition ? B : 0), A.negative && (x = -x), D = "translate" + A.typeUpper + "(" + x + "px )", K.$slideOutNodes.css({ "-webkit-transform": "-webkit-" + D, transform: D })) }), F.on("panend", function (d) { 2 == w && (K.$html.removeClass(c.dragging), K.$slideOutNodes.css("transform", ""), E[J == A.open_dir ? "_openFinish" : "close"]()), w = 0 }) } function h(w, u, z, r) { var v = this, o = w.data(b.parent); if (o) { o = o.closest("." + c.panel); var x = new Hammer(w[0], v.opts[m].vendors.hammer), y = null; x.on("panright", function (d) { y || (v.openPanel(o), y = setTimeout(function () { clearTimeout(y), y = null }, v.conf.openingInterval + v.conf.transitionDuration)) }) } } var q = "mmenu", m = "drag"; j[q].addons[m] = { setup: function () { if (this.opts.offCanvas) { var d = this.opts[m], e = this.conf[m]; k = j[q].glbl, "boolean" == typeof d && (d = { menu: d, panels: d }), "object" != typeof d && (d = {}), "boolean" == typeof d.menu && (d.menu = { open: d.menu }), "object" != typeof d.menu && (d.menu = {}), "boolean" == typeof d.panels && (d.panels = { close: d.panels }), "object" != typeof d.panels && (d.panels = {}), d = this.opts[m] = j.extend(!0, {}, j[q].defaults[m], d), d.menu.open && this.bind("setPage:after", function () { f.call(this, d.menu, e.menu, k) }), d.panels.close && this.bind("initPanel:after", function (i) { h.call(this, i, d.panels, e.panels, k) }) } }, add: function () { return "function" != typeof Hammer || Hammer.VERSION < 2 ? (j[q].addons[m].add = function () { }, void (j[q].addons[m].setup = function () { })) : (c = j[q]._c, b = j[q]._d, g = j[q]._e, void c.add("dragging")) }, clickAnchor: function (i, d) { } }, j[q].defaults[m] = { menu: { open: !1, maxStartPos: 100, threshold: 50 }, panels: { close: !1 }, vendors: { hammer: {} } }, j[q].configuration[m] = { menu: { width: { perc: 0.8, min: 140, max: 440 }, height: { perc: 0.8, min: 140, max: 880 } }, panels: {} }; var c, b, g, k }(a), function (g) { var d = "mmenu", j = "dropdown"; g[d].addons[j] = { setup: function () { if (this.opts.offCanvas) { var k = this, e = this.opts[j], n = this.conf[j]; if (h = g[d].glbl, "boolean" == typeof e && e && (e = { drop: e }), "object" != typeof e && (e = {}), "string" == typeof e.position && (e.position = { of: e.position }), e = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], e), e.drop) { var o; this.bind("initMenu:after", function () { if (this.$menu.addClass(c.dropdown), e.tip && this.$menu.addClass(c.tip), "string" != typeof e.position.of) { var l = this._getOriginalMenuId(); l && l.length && (e.position.of = '[href="#' + l + '"]') } "string" == typeof e.position.of && (o = g(e.position.of), e.event = e.event.split(" "), 1 == e.event.length && (e.event[1] = e.event[0]), "hover" == e.event[0] && o.on(b.mouseenter + "-" + j, function () { k.open() }), "hover" == e.event[1] && this.$menu.on(b.mouseleave + "-" + j, function () { k.close() })) }), this.bind("open:start", function () { this.$menu.data(f.style, this.$menu.attr("style") || ""), h.$html.addClass(c.dropdown) }), this.bind("close:finish", function () { this.$menu.attr("style", this.$menu.data(f.style)), h.$html.removeClass(c.dropdown) }); var i = function (L, A) { var G = A[0], B = A[1], N = "x" == L ? "scrollLeft" : "scrollTop", E = "x" == L ? "outerWidth" : "outerHeight", I = "x" == L ? "left" : "top", K = "x" == L ? "right" : "bottom", z = "x" == L ? "width" : "height", F = "x" == L ? "maxWidth" : "maxHeight", x = null, H = h.$wndw[N](), M = o.offset()[I] -= H, J = M + o[E](), O = h.$wndw[z](), l = n.offset.button[L] + n.offset.viewport[L]; if (e.position[L]) { switch (e.position[L]) { case "left": case "bottom": x = "after"; break; case "right": case "top": x = "before" } } null === x && (x = M + (J - M) / 2 < O / 2 ? "after" : "before"); var D, q; return "after" == x ? (D = "x" == L ? M : J, q = O - (D + l), G[I] = D + n.offset.button[L], G[K] = "auto", B.push(c["x" == L ? "tipleft" : "tiptop"])) : (D = "x" == L ? J : M, q = D - l, G[K] = "calc( 100% - " + (D - n.offset.button[L]) + "px )", G[I] = "auto", B.push(c["x" == L ? "tipright" : "tipbottom"])), G[F] = Math.min(n[z].max, q), [G, B] }, m = function (p) { if (this.vars.opened) { this.$menu.attr("style", this.$menu.data(f.style)); var l = [{}, []]; l = i.call(this, "y", l), l = i.call(this, "x", l), this.$menu.css(l[0]), e.tip && this.$menu.removeClass(c.tipleft + " " + c.tipright + " " + c.tiptop + " " + c.tipbottom).addClass(l[1].join(" ")) } }; this.bind("open:start", m), h.$wndw.on(b.resize + "-" + j, function (l) { m.call(k) }), this.opts.offCanvas.blockUI || h.$wndw.on(b.scroll + "-" + j, function (l) { m.call(k) }) } } }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("dropdown tip tipleft tipright tiptop tipbottom"), b.add("mouseenter mouseleave resize scroll") }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { drop: !1, event: "click", position: {}, tip: !0 }, g[d].configuration[j] = { offset: { button: { x: -10, y: 10 }, viewport: { x: 20, y: 20 } }, height: { max: 880 }, width: { max: 440 } }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "fixedElements"; g[d].addons[j] = { setup: function () { if (this.opts.offCanvas) { var i = this.opts[j], e = this.conf[j]; h = g[d].glbl, i = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], i); var k = function (n) { var o = this.conf.classNames[j].fixed, p = n.find("." + o); this.__refactorClass(p, o, "slideout"), p[e.elemInsertMethod](e.elemInsertSelector); var m = this.conf.classNames[j].sticky, q = n.find("." + m); this.__refactorClass(q, m, "sticky"), q = n.find("." + c.sticky), q.length && (this.bind("open:before", function () { var l = h.$wndw.scrollTop(); q.each(function () { g(this).css("top", parseInt(g(this).css("top"), 10) + l) }) }), this.bind("close:finish", function () { q.css("top", "") })) }; this.bind("setPage:after", k) } }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("sticky") }, clickAnchor: function (k, i) { } }, g[d].configuration[j] = { elemInsertMethod: "appendTo", elemInsertSelector: "body" }, g[d].configuration.classNames[j] = { fixed: "Fixed", sticky: "Sticky" }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "iconPanels"; g[d].addons[j] = { setup: function () { var k = this, i = this.opts[j]; this.conf[j]; if (h = g[d].glbl, "boolean" == typeof i && (i = { add: i }), "number" == typeof i && (i = { add: !0, visible: i }), "object" != typeof i && (i = {}), i = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], i), i.visible++ , i.add) { for (var m = "", e = 0; e <= i.visible; e++) { m += " " + c.iconpanel + "-" + e } m.length && (m = m.slice(1)); var n = function (l) { l.hasClass(c.vertical) || k.$pnls.children("." + c.panel).removeClass(m).filter("." + c.subopened).removeClass(c.hidden).add(l).not("." + c.vertical).slice(-i.visible).each(function (o) { g(this).addClass(c.iconpanel + "-" + o) }) }; this.bind("initMenu:after", function () { this.$menu.addClass(c.iconpanel) }), this.bind("openPanel:start", n), this.bind("initPanels:after", function (l) { n.call(k, k.$pnls.children("." + c.opened)) }), this.bind("initListview:after", function (l) { l.hasClass(c.vertical) || l.children("." + c.subblocker).length || l.prepend('<a href="#' + l.closest("." + c.panel).attr("id") + '" class="' + c.subblocker + '" />') }) } }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("iconpanel subblocker") }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { add: !1, visible: 3 }; var c, f, b, h }(a), function (j) { function p(e, o) { e = e || this.$pnls.children("." + m.opened); var d = j(), l = this.$menu.children("." + m.mm("navbars-top") + ", ." + m.mm("navbars-bottom")).children("." + m.navbar); l.find(k).filter(":focus").length || ("default" == o && (d = e.children("." + m.listview).find("a[href]").not("." + m.hidden), d.length || (d = e.find(k).not("." + m.hidden)), d.length || (d = l.find(k).not("." + m.hidden))), d.length || (d = this.$menu.children("." + m.tabstart)), d.first().focus()) } function f(i) { i || (i = this.$pnls.children("." + m.opened)); var d = this.$pnls.children("." + m.panel), l = d.not(i); l.find(k).attr("tabindex", -1), i.find(k).attr("tabindex", 0), i.find("." + m.mm("toggle") + ", ." + m.mm("check")).attr("tabindex", -1), i.children("." + m.navbar).children("." + m.title).attr("tabindex", -1) } var h = "mmenu", q = "keyboardNavigation"; j[h].addons[q] = { setup: function () { if (!j[h].support.touch) { var l = this.opts[q]; this.conf[q]; if (g = j[h].glbl, "boolean" != typeof l && "string" != typeof l || (l = { enable: l }), "object" != typeof l && (l = {}), l = this.opts[q] = j.extend(!0, {}, j[h].defaults[q], l), l.enable) { var e = j('<button class="' + m.tabstart + '" tabindex="0" type="button" />'), i = j('<button class="' + m.tabend + '" tabindex="0" type="button" />'); this.bind("initMenu:after", function () { l.enhance && this.$menu.addClass(m.keyboardfocus), this["_initWindow_" + q](l.enhance) }), this.bind("initOpened:before", function () { this.$menu.prepend(e).append(i).children("." + m.mm("navbars-top") + ", ." + m.mm("navbars-bottom")).children("." + m.navbar).children("a." + m.title).attr("tabindex", -1) }), this.bind("open:start", function () { f.call(this) }), this.bind("open:finish", function () { p.call(this, null, l.enable) }), this.bind("openPanel:start", function (d) { f.call(this, d) }), this.bind("openPanel:finish", function (d) { p.call(this, d, l.enable) }), this.bind("initOpened:after", function () { this.__sr_aria(this.$menu.children("." + m.mm("tabstart") + ", ." + m.mm("tabend")), "hidden", !0) }) } } }, add: function () { m = j[h]._c, c = j[h]._d, b = j[h]._e, m.add("tabstart tabend keyboardfocus"), b.add("focusin keydown") }, clickAnchor: function (i, d) { } }, j[h].defaults[q] = { enable: !1, enhance: !1 }, j[h].configuration[q] = {}, j[h].prototype["_initWindow_" + q] = function (d) { g.$wndw.off(b.keydown + "-offCanvas"), g.$wndw.off(b.focusin + "-" + q).on(b.focusin + "-" + q, function (e) { if (g.$html.hasClass(m.opened)) { var i = j(e.target); i.is("." + m.tabend) && i.parent().find("." + m.tabstart).focus() } }), g.$wndw.off(b.keydown + "-" + q).on(b.keydown + "-" + q, function (l) { var o = j(l.target), e = o.closest("." + m.menu); if (e.length) { e.data("mmenu"); if (o.is("input, textarea")) { } else { switch (l.keyCode) { case 13: (o.is(".mm-toggle") || o.is(".mm-check")) && o.trigger(b.click); break; case 32: case 37: case 38: case 39: case 40: l.preventDefault() } } } }), d && g.$wndw.off(b.keydown + "-" + q).on(b.keydown + "-" + q, function (l) { var v = j(l.target), e = v.closest("." + m.menu); if (e.length) { var o = e.data("mmenu"); if (v.is("input, textarea")) { switch (l.keyCode) { case 27: v.val("") } } else { switch (l.keyCode) { case 8: var u = v.closest("." + m.panel).data(c.parent); u && u.length && o.openPanel(u.closest("." + m.panel)); break; case 27: e.hasClass(m.offcanvas) && o.close() } } } }) }; var m, c, b, g, k = "input, select, textarea, button, label, a[href]" }(a), function (g) { var d = "mmenu", j = "lazySubmenus"; g[d].addons[j] = { setup: function () { var e = this.opts[j]; this.conf[j]; h = g[d].glbl, "boolean" == typeof e && (e = { load: e }), "object" != typeof e && (e = {}), e = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], e), e.load && (this.bind("initMenu:after", function () { this.$pnls.find("li").children(this.conf.panelNodetype).not("." + c.inset).not("." + c.nolistview).not("." + c.nopanel).addClass(c.lazysubmenu + " " + c.nolistview + " " + c.nopanel) }), this.bind("initPanels:before", function (i) { i = i || this.$pnls.children(this.conf.panelNodetype), this.__findAddBack(i, "." + c.lazysubmenu).not("." + c.lazysubmenu + " ." + c.lazysubmenu).removeClass(c.lazysubmenu + " " + c.nolistview + " " + c.nopanel) }), this.bind("initOpened:before", function () { var i = this.$pnls.find("." + this.conf.classNames.selected).parents("." + c.lazysubmenu); i.length && (i.removeClass(c.lazysubmenu + " " + c.nolistview + " " + c.nopanel), this.initPanels(i.last())) }), this.bind("openPanel:before", function (k) { var i = this.__findAddBack(k, "." + c.lazysubmenu).not("." + c.lazysubmenu + " ." + c.lazysubmenu); i.length && this.initPanels(i) })) }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("lazysubmenu"), f.add("lazysubmenu") }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { load: !1 }, g[d].configuration[j] = {}; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "navbars"; g[d].addons[j] = { setup: function () { var k = this, i = this.opts[j], m = this.conf[j]; if (h = g[d].glbl, "undefined" != typeof i) { i instanceof Array || (i = [i]); var e = {}, n = {}; i.length && (g.each(i, function (q) { var w = i[q]; "boolean" == typeof w && w && (w = {}), "object" != typeof w && (w = {}), "undefined" == typeof w.content && (w.content = ["prev", "title"]), w.content instanceof Array || (w.content = [w.content]), w = g.extend(!0, {}, k.opts.navbar, w); var s = g('<div class="' + c.navbar + '" />'), t = w.height; "number" != typeof t && (t = 1), t = Math.min(4, Math.max(1, t)), s.addClass(c.navbar + "-size-" + t); var z = w.position; "bottom" != z && (z = "top"), e[z] || (e[z] = 0), e[z] += t, n[z] || (n[z] = g('<div class="' + c.navbars + "-" + z + '" />')), n[z].append(s); for (var l = 0, y = 0, r = w.content.length; y < r; y++) { var x = g[d].addons[j][w.content[y]] || !1; x ? l += x.call(k, s, w, m) : (x = w.content[y], x instanceof g || (x = g(w.content[y])), s.append(x)) } l += Math.ceil(s.children().not("." + c.btn).length / t), l > 1 && s.addClass(c.navbar + "-content-" + l), s.children("." + c.btn).length && s.addClass(c.hasbtns) }), this.bind("initMenu:after", function () { for (var l in e) { this.$menu.addClass(c.hasnavbar + "-" + l + "-" + e[l]), this.$menu["bottom" == l ? "append" : "prepend"](n[l]) } })) } }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("navbars close hasbtns") }, clickAnchor: function (k, i) { } }, g[d].configuration[j] = { breadcrumbSeparator: "/" }, g[d].configuration.classNames[j] = {}; var c, f, b, h }(a), function (d) { var c = "mmenu", f = "navbars", b = "breadcrumbs"; d[c].addons[f][b] = function (p, h, j) { var g = this, m = d[c]._c, k = d[c]._d; m.add("breadcrumbs separator"); var e = d('<span class="' + m.breadcrumbs + '" />').appendTo(p); return this.bind("initNavbar:after", function (s) { s.removeClass(m.hasnavbar); for (var v = [], r = d('<span class="' + m.breadcrumbs + '"></span>'), q = s, o = !0; q && q.length;) { if (q.is("." + m.panel) || (q = q.closest("." + m.panel)), !q.hasClass(m.vertical)) { var u = q.children("." + m.navbar).children("." + m.title).text(); v.unshift(o ? "<span>" + u + "</span>" : '<a href="#' + q.attr("id") + '">' + u + "</a>"), o = !1 } q = q.data(k.parent) } r.append(v.join('<span class="' + m.separator + '">' + j.breadcrumbSeparator + "</span>")).appendTo(s.children("." + m.navbar)) }), this.bind("openPanel:start", function (i) { e.html(i.children("." + m.navbar).children("." + m.breadcrumbs).html() || "") }), this.bind("initNavbar:after:sr-aria", function (i) { i.children("." + m.navbar).children("." + m.breadcrumbs).children("a").each(function () { g.__sr_aria(d(this), "owns", d(this).attr("href").slice(1)) }) }), 0 } }(a), function (d) { var c = "mmenu", f = "navbars", b = "close"; d[c].addons[f][b] = function (j, g) { var h = d[c]._c, e = (d[c].glbl, d('<a class="' + h.close + " " + h.btn + '" href="#" />').appendTo(j)); return this.bind("setPage:after", function (i) { e.attr("href", "#" + i.attr("id")) }), this.bind("setPage:after:sr-text", function (i) { e.html(this.__sr_text(d[c].i18n(this.conf.screenReader.text.closeMenu))), this.__sr_aria(e, "owns", e.attr("href").slice(1)) }), -1 } }(a), function (d) { var c = "mmenu", f = "navbars", b = "next"; d[c].addons[f][b] = function (h, j) { var g, n, k, e = d[c]._c, m = d('<a class="' + e.next + " " + e.btn + '" href="#" />').appendTo(h); return this.bind("openPanel:start", function (i) { g = i.find("." + this.conf.classNames[f].panelNext), n = g.attr("href"), k = g.html(), n ? m.attr("href", n) : m.removeAttr("href"), m[n || k ? "removeClass" : "addClass"](e.hidden), m.html(k) }), this.bind("openPanel:start:sr-aria", function (i) { this.__sr_aria(m, "hidden", m.hasClass(e.hidden)), this.__sr_aria(m, "owns", (m.attr("href") || "").slice(1)) }), -1 }, d[c].configuration.classNames[f].panelNext = "Next" }(a), function (d) { var c = "mmenu", f = "navbars", b = "prev"; d[c].addons[f][b] = function (h, j) { var g = d[c]._c, n = d('<a class="' + g.prev + " " + g.btn + '" href="#" />').appendTo(h); this.bind("initNavbar:after", function (i) { i.removeClass(g.hasnavbar) }); var k, e, m; return this.bind("openPanel:start", function (i) { i.hasClass(g.vertical) || (k = i.find("." + this.conf.classNames[f].panelPrev), k.length || (k = i.children("." + g.navbar).children("." + g.prev)), e = k.attr("href"), m = k.html(), e ? n.attr("href", e) : n.removeAttr("href"), n[e || m ? "removeClass" : "addClass"](g.hidden), n.html(m)) }), this.bind("initNavbar:after:sr-aria", function (l) { var i = l.children("." + g.navbar); this.__sr_aria(i, "hidden", !0) }), this.bind("openPanel:start:sr-aria", function (i) { this.__sr_aria(n, "hidden", n.hasClass(g.hidden)), this.__sr_aria(n, "owns", (n.attr("href") || "").slice(1)) }), -1 }, d[c].configuration.classNames[f].panelPrev = "Prev" }(a), function (d) { var c = "mmenu", f = "navbars", b = "searchfield"; d[c].addons[f][b] = function (j, g) { var h = d[c]._c, e = d('<div class="' + h.search + '" />').appendTo(j); return "object" != typeof this.opts.searchfield && (this.opts.searchfield = {}), this.opts.searchfield.add = !0, this.opts.searchfield.addTo = e, 0 } }(a), function (d) { var c = "mmenu", f = "navbars", b = "title"; d[c].addons[f][b] = function (h, j) { var g, n, k, e = d[c]._c, m = d('<a class="' + e.title + '" />').appendTo(h); this.bind("openPanel:start", function (i) { i.hasClass(e.vertical) || (k = i.find("." + this.conf.classNames[f].panelTitle), k.length || (k = i.children("." + e.navbar).children("." + e.title)), g = k.attr("href"), n = k.html() || j.title, g ? m.attr("href", g) : m.removeAttr("href"), m[g || n ? "removeClass" : "addClass"](e.hidden), m.html(n)) }); var p; return this.bind("openPanel:start:sr-aria", function (l) { if (this.opts.screenReader.text && (p || (p = this.$menu.children("." + e.navbars + "-top, ." + e.navbars + "-bottom").children("." + e.navbar).children("." + e.prev)), p.length)) { var i = !0; "parent" == this.opts.navbar.titleLink && (i = !p.hasClass(e.hidden)), this.__sr_aria(m, "hidden", i) } }), 0 }, d[c].configuration.classNames[f].panelTitle = "Title" }(a), function (j) { function p(d) { k && k.length && k.is(":visible") && g.$html.add(g.$body).animate({ scrollTop: k.offset().top + d }), k = !1 } function f(i) { try { return !("#" == i || "#" != i.slice(0, 1) || !g.$page.find(i).length) } catch (d) { return !1 } } var h = "mmenu", q = "pageScroll"; j[h].addons[q] = { setup: function () { var r = this, n = this.opts[q], s = this.conf[q]; if (g = j[h].glbl, "boolean" == typeof n && (n = { scroll: n }), n = this.opts[q] = j.extend(!0, {}, j[h].defaults[q], n), n.scroll && this.bind("close:finish", function () { p(s.scrollOffset) }), n.update) { var r = this, i = [], l = []; r.bind("initListview:after", function (d) { r.__filterListItemAnchors(d.find("." + m.listview).children("li")).each(function () { var o = j(this).attr("href"); f(o) && i.push(o) }), l = i.reverse() }); var e = -1; g.$wndw.on(b.scroll + "-" + q, function (o) { for (var u = g.$wndw.scrollTop(), d = 0; d < l.length; d++) { if (j(l[d]).offset().top < u + s.updateOffset) { e !== d && (e = d, r.setSelected(r.__filterListItemAnchors(r.$pnls.children("." + m.opened).find("." + m.listview).children("li")).filter('[href="' + l[d] + '"]').parent())); break } } }) } }, add: function () { m = j[h]._c, c = j[h]._d, b = j[h]._e }, clickAnchor: function (d, l) { if (k = !1, l && this.opts[q].scroll && this.opts.offCanvas && g.$page && g.$page.length) { var e = d.attr("href"); f(e) && (k = j(e), g.$html.hasClass(m.mm("widescreen")) && p(this.conf[q].scrollOffset)) } } }, j[h].defaults[q] = { scroll: !1, update: !1 }, j[h].configuration[q] = { scrollOffset: 0, updateOffset: 50 }; var m, c, b, g, k = !1 }(a), function (g) { var d = "mmenu", j = "rtl"; g[d].addons[j] = { setup: function () { var e = this.opts[j]; this.conf[j]; h = g[d].glbl, "object" != typeof e && (e = { use: e }), e = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], e), "boolean" != typeof e.use && (e.use = "rtl" == (h.$html.attr("dir") || "").toLowerCase()), e.use && this.bind("initMenu:after", function () { this.$menu.addClass(c.rtl) }) }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("rtl") }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { use: "detect" }; var c, f, b, h }(a), function (h) { function d(i) { switch (i) { case 9: case 16: case 17: case 18: case 37: case 38: case 39: case 40: return !0 }return !1 } var k = "mmenu", c = "searchfield"; h[k].addons[c] = { setup: function () { var e = this, i = this.opts[c], m = this.conf[c]; g = h[k].glbl, "boolean" == typeof i && (i = { add: i }), "object" != typeof i && (i = {}), "boolean" == typeof i.resultsPanel && (i.resultsPanel = { add: i.resultsPanel }), i = this.opts[c] = h.extend(!0, {}, h[k].defaults[c], i), m = this.conf[c] = h.extend(!0, {}, h[k].configuration[c], m), this.bind("close:start", function () { this.$menu.find("." + f.search).find("input").blur() }), this.bind("initPanels:after", function (n) { if (i.add) { var l; switch (i.addTo) { case "panels": l = n; break; default: l = this.$menu.find(i.addTo) }if (l.each(function () { var E = h(this); if (!E.is("." + f.panel) || !E.is("." + f.vertical)) { if (!E.children("." + f.search).length) { var x = e.__valueOrFn(m.clear, E), B = e.__valueOrFn(m.form, E), q = e.__valueOrFn(m.input, E), y = e.__valueOrFn(m.submit, E), z = h("<" + (B ? "form" : "div") + ' class="' + f.search + '" />'), D = h('<input placeholder="' + h[k].i18n(i.placeholder) + '" type="text" autocomplete="off" />'); z.append(D); var s; if (q) { for (s in q) { D.attr(s, q[s]) } } if (x && h('<a class="' + f.btn + " " + f.clear + '" href="#" />').appendTo(z).on(j.click + "-searchfield", function (p) { p.preventDefault(), D.val("").trigger(j.keyup + "-searchfield") }), B) { for (s in B) { z.attr(s, B[s]) } y && !x && h('<a class="' + f.btn + " " + f.next + '" href="#" />').appendTo(z).on(j.click + "-searchfield", function (p) { p.preventDefault(), z.submit() }) } E.hasClass(f.search) ? E.replaceWith(z) : E.prepend(z).addClass(f.hassearch) } if (i.noResults) { var C = E.closest("." + f.panel).length; if (C || (E = e.$pnls.children("." + f.panel).first()), !E.children("." + f.noresultsmsg).length) { var w = E.children("." + f.listview).first(), A = h('<div class="' + f.noresultsmsg + " " + f.hidden + '" />'); A.append(h[k].i18n(i.noResults))[w.length ? "insertAfter" : "prependTo"](w.length ? w : E) } } } }), i.search) { if (i.resultsPanel.add) { i.showSubPanels = !1; var o = this.$pnls.children("." + f.resultspanel); o.length || (o = h('<div class="' + f.resultspanel + " " + f.noanimation + " " + f.hidden + '" />').appendTo(this.$pnls).append('<div class="' + f.navbar + " " + f.hidden + '"><a class="' + f.title + '">' + h[k].i18n(i.resultsPanel.title) + "</a></div>").append('<ul class="' + f.listview + '" />').append(this.$pnls.find("." + f.noresultsmsg).first().clone()), this._initPanel(o)) } this.$menu.find("." + f.search).each(function () { var w, q, B = h(this), z = B.closest("." + f.panel).length; z ? (w = B.closest("." + f.panel), q = w) : (w = e.$pnls.find("." + f.panel), q = e.$menu), i.resultsPanel.add && (w = w.not(o)); var H = B.children("input"), t = e.__findAddBack(w, "." + f.listview).children("li"), G = t.filter("." + f.divider), x = e.__filterListItems(t), E = "a", A = E + ", span", F = "", D = function () { var r = H.val().toLowerCase(); if (r != F) { if (F = r, i.resultsPanel.add && o.children("." + f.listview).empty(), w.scrollTop(0), x.add(G).addClass(f.hidden).find("." + f.fullsubopensearch).removeClass(f.fullsubopen + " " + f.fullsubopensearch), x.each(function () { var v = h(this), y = E; (i.showTextItems || i.showSubPanels && v.find("." + f.next)) && (y = A); var u = v.data(b.searchtext) || v.children(y).not("." + f.next).text(); u.toLowerCase().indexOf(F) > -1 && v.add(v.prevAll("." + f.divider).first()).removeClass(f.hidden) }), i.showSubPanels && w.each(function (u) { var v = h(this); e.__filterListItems(v.find("." + f.listview).children()).each(function () { var y = h(this), C = y.data(b.child); y.removeClass(f.nosubresults), C && C.find("." + f.listview).children().removeClass(f.hidden) }) }), i.resultsPanel.add) { if ("" === F) { this.closeAllPanels(this.$pnls.children("." + f.subopened).last()) } else { var p = h(); w.each(function () { var u = e.__filterListItems(h(this).find("." + f.listview).children()).not("." + f.hidden).clone(!0); u.length && (i.resultsPanel.dividers && (p = p.add('<li class="' + f.divider + '">' + h(this).children("." + f.navbar).children("." + f.title).text() + "</li>")), u.children("." + f.mm("toggle") + ", ." + f.mm("check")).remove(), p = p.add(u)) }), p.find("." + f.next).remove(), o.children("." + f.listview).append(p), this.openPanel(o) } } else { h(w.get().reverse()).each(function (v) { var y = h(this), u = y.data(b.parent); u && (e.__filterListItems(y.find("." + f.listview).children()).length ? (u.hasClass(f.hidden) && u.children("." + f.next).not("." + f.fullsubopen).addClass(f.fullsubopen).addClass(f.fullsubopensearch), u.removeClass(f.hidden).removeClass(f.nosubresults).prevAll("." + f.divider).first().removeClass(f.hidden)) : z || ((y.hasClass(f.opened) || y.hasClass(f.subopened)) && setTimeout(function () { e.openPanel(u.closest("." + f.panel)) }, (v + 1) * (1.5 * e.conf.openingInterval)), u.addClass(f.nosubresults))) }) } q.find("." + f.noresultsmsg)[x.not("." + f.hidden).length ? "addClass" : "removeClass"](f.hidden), this.trigger("updateListview") } }; H.off(j.keyup + "-" + c + " " + j.change + "-" + c).on(j.keyup + "-" + c, function (p) { d(p.keyCode) || D.call(e) }).on(j.change + "-" + c, function (p) { D.call(e) }); var s = B.children("." + f.btn); s.length && H.on(j.keyup + "-" + c, function (p) { s[H.val().length ? "removeClass" : "addClass"](f.hidden) }), H.trigger(j.keyup + "-" + c) }) } } }) }, add: function () { f = h[k]._c, b = h[k]._d, j = h[k]._e, f.add("clear search hassearch resultspanel noresultsmsg noresults nosubresults fullsubopensearch"), b.add("searchtext"), j.add("change keyup") }, clickAnchor: function (l, i) { } }, h[k].defaults[c] = { add: !1, addTo: "panels", placeholder: "Search", noResults: "No results found.", resultsPanel: { add: !1, dividers: !0, title: "Search results" }, search: !0, showTextItems: !1, showSubPanels: !0 }, h[k].configuration[c] = { clear: !1, form: !1, input: !1, submit: !1 }; var f, b, j, g }(a), function (g) { var d = "mmenu", j = "sectionIndexer"; g[d].addons[j] = { setup: function () { var e = this, i = this.opts[j]; this.conf[j]; h = g[d].glbl, "boolean" == typeof i && (i = { add: i }), "object" != typeof i && (i = {}), i = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], i), this.bind("initPanels:after", function (m) { if (i.add) { var n; switch (i.addTo) { case "panels": n = m; break; default: n = g(i.addTo, this.$menu).filter("." + c.panel) }n.find("." + c.divider).closest("." + c.panel).addClass(c.hasindexer), this.$indexer || (this.$indexer = g('<div class="' + c.indexer + '" />').prependTo(this.$pnls).append('<a href="#a">a</a><a href="#b">b</a><a href="#c">c</a><a href="#d">d</a><a href="#e">e</a><a href="#f">f</a><a href="#g">g</a><a href="#h">h</a><a href="#i">i</a><a href="#j">j</a><a href="#k">k</a><a href="#l">l</a><a href="#m">m</a><a href="#n">n</a><a href="#o">o</a><a href="#p">p</a><a href="#q">q</a><a href="#r">r</a><a href="#s">s</a><a href="#t">t</a><a href="#u">u</a><a href="#v">v</a><a href="#w">w</a><a href="#x">x</a><a href="#y">y</a><a href="#z">z</a>'), this.$indexer.children().on(b.mouseover + "-" + j + " " + b.touchstart + "-" + j, function (s) { var w = g(this).attr("href").slice(1), q = e.$pnls.children("." + c.opened), v = q.find("." + c.listview), u = -1, p = q.scrollTop(); q.scrollTop(0), v.children("." + c.divider).not("." + c.hidden).each(function () { u < 0 && w == g(this).text().slice(0, 1).toLowerCase() && (u = g(this).position().top) }), q.scrollTop(u > -1 ? u : p) })); var k = function (l) { l = l || this.$pnls.children("." + c.opened), this.$menu[(l.hasClass(c.hasindexer) ? "add" : "remove") + "Class"](c.hasindexer) }; this.bind("openPanel:start", k), this.bind("initPanels:after", k) } }) }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("indexer hasindexer"), b.add("mouseover") }, clickAnchor: function (k, i) { if (k.parent().is("." + c.indexer)) { return !0 } } }, g[d].defaults[j] = { add: !1, addTo: "panels" }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "setSelected"; g[d].addons[j] = { setup: function () { var i = this, k = this.opts[j]; this.conf[j]; if (h = g[d].glbl, "boolean" == typeof k && (k = { hover: k, parent: k }), "object" != typeof k && (k = {}), k = this.opts[j] = g.extend(!0, {}, g[d].defaults[j], k), "detect" == k.current) { var e = function (m) { m = m.split("?")[0].split("#")[0]; var l = i.$menu.find('a[href="' + m + '"], a[href="' + m + '/"]'); l.length ? i.setSelected(l.parent(), !0) : (m = m.split("/").slice(0, -1), m.length && e(m.join("/"))) }; this.bind("initMenu:after", function () { e(window.location.href) }) } else { k.current || this.bind("initListview:after", function (l) { this.$pnls.find("." + c.listview).children("." + c.selected).removeClass(c.selected) }) } k.hover && this.bind("initMenu:after", function () { this.$menu.addClass(c.hoverselected) }), k.parent && (this.bind("openPanel:finish", function (m) { this.$pnls.find("." + c.listview).find("." + c.next).removeClass(c.selected); for (var l = m.data(f.parent); l;) { l.not("." + c.vertical).children("." + c.next).addClass(c.selected), l = l.closest("." + c.panel).data(f.parent) } }), this.bind("initMenu:after", function () { this.$menu.addClass(c.parentselected) })) }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("hoverselected parentselected") }, clickAnchor: function (k, i) { } }, g[d].defaults[j] = { current: !0, hover: !1, parent: !1 }; var c, f, b, h }(a), function (g) { var d = "mmenu", j = "toggles"; g[d].addons[j] = { setup: function () { var e = this; this.opts[j], this.conf[j]; h = g[d].glbl, this.bind("initListview:after", function (i) { this.__refactorClass(i.find("input"), this.conf.classNames[j].toggle, "toggle"), this.__refactorClass(i.find("input"), this.conf.classNames[j].check, "check"), i.find("input." + c.toggle + ", input." + c.check).each(function () { var l = g(this), p = l.closest("li"), k = l.hasClass(c.toggle) ? "toggle" : "check", m = l.attr("id") || e.__getUniqueId(); p.children('label[for="' + m + '"]').length || (l.attr("id", m), p.prepend(l), g('<label for="' + m + '" class="' + c[k] + '"></label>').insertBefore(p.children("a, span").last())) }) }) }, add: function () { c = g[d]._c, f = g[d]._d, b = g[d]._e, c.add("toggle check") }, clickAnchor: function (k, i) { } }, g[d].configuration.classNames[j] = { toggle: "Toggle", check: "Check" }; var c, f, b, h }(a); return true }));